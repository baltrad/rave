dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run during rave
dnl	installation to configure the system for the local environment.

AC_INIT([RAVE],[0.65a])

RAVE_VERSION=0.65a
RAVE_PATCH_LEVEL=0

if test "${prefix}" = "NONE"; then
	prefix=/usr/local/rave
fi

LIBS=-lm


AC_ARG_WITH(python,[  --with-python=(yes|no)     Compile for python],
           ,withval=yes)
COMPILE_FOR_PYTHON=yes
case $withval in
  no)
       COMPILE_FOR_PYTHON=no
       ;;
  *)
       ;;
esac

# Allow specify of enable-py3support for backward compatibility but if it is disabled we will fail configuration
py3support=yes
AC_ARG_ENABLE(py3support,
  [  --enable-py3support     Builds rave with support for python3.],
  py3support=$enableval)
if [[ "$COMPILE_FOR_PYTHON" = "yes" ]]; then
  if [[ "x$py3support" != "xyes" ]]; then
    AC_MSG_ERROR([Only python3 is supported])
  fi
fi

# --enable-py3support 
# --with-py3bin=python3.6 
# --with-py3bin-config=python3.6-config 
# --with-python-makefile=/usr/lib64/python3.6/config-3.6m-x86_64-linux-gnu/Makefile
PYBIN=
AC_ARG_WITH(py3bin, [  --with-py3bin=python3 What python binary to use],
		    ,withval=)
if [[ "$COMPILE_FOR_PYTHON" = "yes" ]]; then
  PYBINSTOTEST="python3 python"
  if [[ "$withval" != "" ]]; then
    PYBINSTOTEST=$withval
  fi
  AC_MSG_CHECKING([what python binary to use])
  for pybin in $PYBINSTOTEST; do
    which $pybin >> /dev/null 2>&1
    if [[ $? -eq 0 ]]; then
      PYVER=`$pybin -c "import sys; print(sys.version_info[[0]])"`
      PY_MIN_VER=`$pybin -c "import sys; print(sys.version_info[[1]])"`
      if [[ $? -eq 0 ]]; then
        if [[ "$PYVER" = "" -o "$PY_MIN_VER" = "" ]]; then
          AC_MSG_ERROR([Could not identify python versions Major=$PYVER Minor=$PY_MIN_VER])
        fi
        
        if [[ $PYVER -ge 3 -a $PY_MIN_VER -ge 2 ]]; then
          PYBIN=$pybin
          break
        fi
      fi
    fi
  done
  if [[ "$PYBIN" != "" ]]; then
    AC_MSG_RESULT([$PYBIN])
  else
    AC_MSG_ERROR([Could not identify proper python binary. Must be >= 3.2])
  fi
fi  

PY_PYTHON_BIN="$PYBIN"

if [[ "$COMPILE_FOR_PYTHON" = "yes" ]]; then
  AC_MSG_CHECKING([for python version])
  PYVERSION=`$PYBIN -c "import sysconfig; print(sysconfig.get_python_version())"`
  AC_MSG_RESULT([$PYVERSION])
  
  AC_MSG_CHECKING([for python exec dir])
  PY_EXEC_INSTALLDIR=`$PYBIN -c "import sysconfig; print(sysconfig.get_config_var(\"exec_prefix\"))"`
  AC_MSG_RESULT([$PY_EXEC_INSTALLDIR])
fi

PY_CONFIG_MAKE=
AC_ARG_WITH(python-makefile, [  --with-python-makefile=Makefile  Where the makefile used for building python can be found],
		    ,withval=no)
if [[ "$COMPILE_FOR_PYTHON" = "yes" ]]; then
  AC_MSG_CHECKING(for python Makefile)
  if [[ "$withval" != "no" ]]; then
    if [[ -f $withval ]]; then
      PY_CONFIG_MAKE="$withval"
    fi
  fi

  if [[ "x$PY_CONFIG_MAKE" = "x" ]]; then
    PY_CONFIG_MAKE=`$PYBIN -c "import sysconfig; print(sysconfig.get_makefile_filename() or '')"`
  fi

  if [[ ! -f "$PY_CONFIG_MAKE" ]]; then
    AC_MSG_ERROR(Could not successfully find the python Makefile)
  fi
  
  AC_MSG_RESULT($PY_CONFIG_MAKE)

fi


if [[ "$COMPILE_FOR_PYTHON" = "yes" ]]; then
  #
  # Extract what compiler the python binary was compiled with
  #
  AC_MSG_CHECKING([for the compiler used for generating python])

  PYCC=`$PYBIN -c "import sysconfig; print(sysconfig.get_config_var(\"CC\") or '')"`

  AC_MSG_RESULT([$PYCC])

  dnl Later on we are going to check for pthread support but since we know that
  dnl python might determine pthread flags we can at least see what python
  dnl came up with.
  AC_MSG_CHECKING(if python CC defines pthread usage)
  PYPTHREADCC=`echo $PYCC | grep "pthread"`
  PYGOTPTHREAD=no
  if [[ "$PYPTHREADCC" != "" ]]; then
    PYGOTPTHREAD=yes
  fi
  AC_MSG_RESULT($PYGOTPTHREAD)

fi #if COMPILE_FOR_PYTHON


AC_PROG_RANLIB
AC_PROG_CC($PYCC gcc cc)
AC_PROG_CPP
AC_SUBST(AR)
AC_CHECK_PROGS(AR, ar aal, ar)

PYCC=$CC

PY_INCLUDES=
PY_SITEPACK=
PYOPT=
PYLDFLAGS=
PYLDSHARED=
PYCCSHARED=
PYDEFS=

if [[ "$COMPILE_FOR_PYTHON" = "yes" ]]; then
  AC_MSG_CHECKING([for python includes])
  PY_PATH_INCLUDES=`$PYBIN -c "import sysconfig; print(sysconfig.get_path(\"include\") or '')"`
  AC_MSG_RESULT([$PY_PATH_INCLUDES])

  AC_MSG_CHECKING([for platform specific python includes])
  PY_PATH_PLAT_INCLUDES=`$PYBIN -c "import sysconfig; print(sysconfig.get_path(\"platinclude\") or '')"`
  AC_MSG_RESULT([$PY_PATH_PLAT_INCLUDES])

  AC_MSG_CHECKING([for python include directives])
  PY_INCLUDES="-I$PY_PATH_INCLUDES -I$PY_PATH_PLAT_INCLUDES"
  AC_MSG_RESULT([$PY_INCLUDES])

  AC_MSG_CHECKING([for python lib platform site-packages])
  TMP_SITEPACK=`$PYBIN -c "import sysconfig; print(sysconfig.get_path(\"platlib\") or '')"`
  if [[ "$TMP_SITEPACK" != "" ]]; then
    PY_SITEPACK="$TMP_SITEPACK"
  else
    AC_MSG_ERROR([Failed to identify site-packages])
  fi
  AC_MSG_RESULT([$PY_SITEPACK])

  dnl Checks for typedefs, structures and compiler characteristics
  AC_MSG_CHECKING([for python options])
  PYOPT=`$PYBIN -c "import sysconfig; print(sysconfig.get_config_var(\"OPT\") or '')"`
  AC_MSG_RESULT([$PYOPT])

  AC_MSG_CHECKING([for ldflags])
  PYLDFLAGS=`$PYBIN -c "import sysconfig; print(sysconfig.get_config_var(\"LDFLAGS\") or '')"`
  AC_MSG_RESULT([$PYLDFLAGS])

  AC_MSG_CHECKING([for ldshared])
  PYLDSHARED=`$PYBIN -c "import sysconfig; print(sysconfig.get_config_var(\"LDSHARED\") or '')"`

  # Special hack for mac osx.
  ISMACOS=no
  case `uname -s` in
    Darwin*)
      ISMACOS=yes
      ;;
    darwin*)
      ISMACOS=yes
      ;;
  esac

  if [[ "x$ISMACOS" = "xyes" ]]; then
    PYLDSHARED=`echo $PYLDSHARED | sed -e "s/[[ \t]]-bundle[[ \t]]/ -dynamiclib /g"`
  fi
  AC_MSG_RESULT([$PYLDSHARED])

  AC_MSG_CHECKING([for ccshared])
  PYCCSHARED=`$PYBIN -c "import sysconfig; print(sysconfig.get_config_var(\"CCSHARED\") or '')"`
  AC_MSG_RESULT([$PYCCSHARED])

  AC_MSG_CHECKING([for defs])
  PYDEFS=`$PYBIN -c "import sysconfig; print(sysconfig.get_config_var(\"DEFS\") or '')"`
  AC_MSG_RESULT([$PYDEFS])

else #if COMPILE_FOR_PYTHON
  # If we are building without python support, then we still want to use a similar way to identify compiler flags as when running Python.
  # This part has been taken from python config-file since we still want the same behaviour regardless if we are building for python or not.
  #
  # However, this is not complete, just the basic stuff to get optimization flags in place.
  AC_ARG_VAR([MACHDEP], [name for machine-dependent library files])
  AC_MSG_CHECKING(MACHDEP)
  if test -z "$MACHDEP"; then
    # avoid using uname for cross builds
    if test "$cross_compiling" = yes; then
       # ac_sys_system and ac_sys_release are used for setting
       # a lot of different things including 'define_xopen_source'
       # in the case statement below.
	case "$host" in
	*-*-linux-android*)
		ac_sys_system=Linux-android
		;;
	*-*-linux*)
		ac_sys_system=Linux
		;;
	*-*-cygwin*)
		ac_sys_system=Cygwin
		;;
	*)
		# for now, limit cross builds to known configurations
		MACHDEP="unknown"
		AC_MSG_ERROR([cross build not supported for $host])
	esac
	ac_sys_release=
    else
	ac_sys_system=`uname -s`
	if test "$ac_sys_system" = "AIX" \
	-o "$ac_sys_system" = "UnixWare" -o "$ac_sys_system" = "OpenUNIX"; then
		ac_sys_release=`uname -v`
	else
		ac_sys_release=`uname -r`
	fi
    fi
    ac_md_system=`echo $ac_sys_system |
			tr -d '[/ ]' | tr '[[A-Z]]' '[[a-z]]'`
    ac_md_release=`echo $ac_sys_release |
			tr -d '[/ ]' | sed 's/^[[A-Z]]\.//' | sed 's/\..*//'`
    MACHDEP="$ac_md_system$ac_md_release"

    case $MACHDEP in
	linux*) MACHDEP="linux";;
	cygwin*) MACHDEP="cygwin";;
	darwin*) MACHDEP="darwin";;
	irix646) MACHDEP="irix6";;
	'')	MACHDEP="unknown";;
    esac
  fi
  
  case $ac_sys_system in
    # is there any other compiler on Darwin besides gcc?
    Darwin*)
        # -Wno-long-double, -no-cpp-precomp, and -mno-fused-madd
        # used to be here, but non-Apple gcc doesn't accept them.
        if test "${CC}" = gcc; then
            AC_MSG_CHECKING(which compiler should be used)
            case "${UNIVERSALSDK}" in
            */MacOSX10.4u.sdk)
                # Build using 10.4 SDK, force usage of gcc when the
                # compiler is gcc, otherwise the user will get very
                # confusing error messages when building on OSX 10.6
                CC=gcc-4.0
                CPP=cpp-4.0
                ;;
            esac
            AC_MSG_RESULT($CC)
        fi  
        
        AC_MSG_CHECKING(which MACOSX_DEPLOYMENT_TARGET to use)
        cur_target_major=`sw_vers -productVersion | \
                sed 's/\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
        cur_target_minor=`sw_vers -productVersion | \
                sed 's/\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
        cur_target="${cur_target_major}.${cur_target_minor}"
        if test ${cur_target_major} -eq 10 && \
           test ${cur_target_minor} -ge 3 && \
           test ${cur_target_minor} -le 5
        then
            # OS X 10.3 through 10.5
            cur_target=10.3
            if test ${enable_universalsdk}
            then
                case "$UNIVERSAL_ARCHS" in
                all|3-way|intel|64-bit)
                    # These configurations were first supported in 10.5
                    cur_target='10.5'
                    ;;
                esac
            else
                if test `/usr/bin/arch` = "i386"
                then
                    # 10.4 was the first release to support Intel archs
                    cur_target="10.4"
                fi
            fi
        fi
        CONFIGURE_MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET-${cur_target}}
        # Make sure that MACOSX_DEPLOYMENT_TARGET is set in the
        # environment with a value that is the same as what we'll use
        # in the Makefile to ensure that we'll get the same compiler
        # environment during configure and build time.
        MACOSX_DEPLOYMENT_TARGET="$CONFIGURE_MACOSX_DEPLOYMENT_TARGET"
        export MACOSX_DEPLOYMENT_TARGET
        EXPORT_MACOSX_DEPLOYMENT_TARGET=''
        AC_MSG_RESULT($MACOSX_DEPLOYMENT_TARGET)

        # end of Darwin* tests
        ;;
  esac        
  
  # SHLIB_SUFFIX is the extension of shared libraries `(including the dot!)
  # -- usually .so, .sl on HP-UX, .dll on Cygwin
  AC_MSG_CHECKING(the extension of shared libraries)
  if test -z "$SHLIB_SUFFIX"; then
	case $ac_sys_system in
	hp*|HP*)
		case `uname -m` in
			ia64) SHLIB_SUFFIX=.so;;
	  		*)    SHLIB_SUFFIX=.sl;;
		esac
		;;
	CYGWIN*)   SHLIB_SUFFIX=.dll;;
	*)	   SHLIB_SUFFIX=.so;;
	esac
  fi
  AC_MSG_RESULT($SHLIB_SUFFIX)

# LDSHARED is the ld *command* used to create shared library
# -- "cc -G" on SunOS 5.x, "ld -shared" on IRIX 5
# (Shared libraries in this instance are shared modules to be loaded into
# Python, as opposed to building Python itself as a shared library.)
  AC_MSG_CHECKING(LDSHARED)
  if test -z "$LDSHARED"
    then
	case $ac_sys_system/$ac_sys_release in
	AIX*)
		BLDSHARED="Modules/ld_so_aix \$(CC) -bI:Modules/python.exp"
		LDSHARED="\$(LIBPL)/ld_so_aix \$(CC) -bI:\$(LIBPL)/python.exp"
		;;
	IRIX/5*) LDSHARED="ld -shared";;
	IRIX*/6*) LDSHARED="ld ${SGI_ABI} -shared -all";;
	SunOS/5*)
		if test "$GCC" = "yes" ; then
			LDSHARED='$(CC) -shared'
			LDCXXSHARED='$(CXX) -shared'
		else
			LDSHARED='$(CC) -G'
			LDCXXSHARED='$(CXX) -G'
		fi ;;
	hp*|HP*)
		if test "$GCC" = "yes" ; then
			LDSHARED='$(CC) -shared'
			LDCXXSHARED='$(CXX) -shared'
		else
			LDSHARED='ld -b'
		fi ;;
	Darwin/1.3*)
		LDSHARED='$(CC) -dynamiclib'
		LDCXXSHARED='$(CXX) -dynamiclib'
		LDSHARED="$LDSHARED -undefined suppress"
		LDCXXSHARED="$LDCXXSHARED -undefined suppress"
		;;
	Darwin/1.4*|Darwin/5.*|Darwin/6.*)
		LDSHARED='$(CC) -dynamiclib'
		LDCXXSHARED='$(CXX) -dynamiclib'
		BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
		LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
		LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
		;;
	Darwin/*)
		# Use -undefined dynamic_lookup whenever possible (10.3 and later).
		dep_target_major=`echo ${MACOSX_DEPLOYMENT_TARGET} | \
				sed 's/\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
		dep_target_minor=`echo ${MACOSX_DEPLOYMENT_TARGET} | \
				sed 's/\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
		if test ${dep_target_major} -eq 10 && \
		   test ${dep_target_minor} -le 2; then
			# building for OS X 10.0 through 10.2
			LDSHARED='$(CC) -dynamiclib'
			LDCXXSHARED='$(CXX) -dynamiclib'
			# No framework, use the Python app as bundle-loader
			BLDSHARED="$LDSHARED "'-bundle_loader $(BUILDPYTHON)'
			LDSHARED="$LDSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
			LDCXXSHARED="$LDCXXSHARED "'-bundle_loader $(BINDIR)/python$(VERSION)$(EXE)'
		else
			# building for OS X 10.3 and later
			LDSHARED='$(CC) -dynamiclib -undefined dynamic_lookup'
			LDCXXSHARED='$(CXX) -dynamiclib -undefined dynamic_lookup'
			BLDSHARED="$LDSHARED"
		fi
		;;
	Linux*|GNU*|QNX*)
		LDSHARED='$(CC) -shared'
		LDCXXSHARED='$(CXX) -shared';;
	BSD/OS*/4*)
		LDSHARED="gcc -shared"
		LDCXXSHARED="g++ -shared";;
	FreeBSD*)
		if [[ "`$CC -dM -E - </dev/null | grep __ELF__`" != "" ]]
		then
			LDSHARED='$(CC) -shared'
			LDCXXSHARED='$(CXX) -shared'
		else
			LDSHARED="ld -Bshareable"
		fi;;
	OpenBSD*)
		if [[ "`$CC -dM -E - </dev/null | grep __ELF__`" != "" ]]
		then
				LDSHARED='$(CC) -shared $(CCSHARED)'
				LDCXXSHARED='$(CXX) -shared $(CCSHARED)'
		else
				case `uname -r` in
				[[01]].* | 2.[[0-7]] | 2.[[0-7]].*)
				   LDSHARED="ld -Bshareable ${LDFLAGS}"
				   ;;
				*)
				   LDSHARED='$(CC) -shared $(CCSHARED)'
				   LDCXXSHARED='$(CXX) -shared $(CCSHARED)'
				   ;;
				esac
		fi;;
	NetBSD*|DragonFly*)
		LDSHARED='$(CC) -shared'
		LDCXXSHARED='$(CXX) -shared';;
	OpenUNIX*|UnixWare*)
		if test "$GCC" = "yes" ; then
			LDSHARED='$(CC) -shared'
			LDCXXSHARED='$(CXX) -shared'
		else
			LDSHARED='$(CC) -G'
			LDCXXSHARED='$(CXX) -G'
		fi;;
	SCO_SV*)
		LDSHARED='$(CC) -Wl,-G,-Bexport'
		LDCXXSHARED='$(CXX) -Wl,-G,-Bexport';;
	CYGWIN*)
		LDSHARED="gcc -shared -Wl,--enable-auto-image-base"
		LDCXXSHARED="g++ -shared -Wl,--enable-auto-image-base";;
	*)	LDSHARED="ld";;
	esac
  fi
  PYLDSHARED=$LDSHARED
  AC_MSG_RESULT($PYLDSHARED)

# CCSHARED are the C *flags* used to create objects to go into a shared
# library (module) -- this is only needed for a few systems
  AC_MSG_CHECKING(CCSHARED)
  if test -z "$CCSHARED"
  then
	case $ac_sys_system/$ac_sys_release in
	SunOS*) if test "$GCC" = yes;
		then CCSHARED="-fPIC";
		elif test `uname -p` = sparc;
		then CCSHARED="-xcode=pic32";
		else CCSHARED="-Kpic";
		fi;;
	hp*|HP*) if test "$GCC" = yes;
		 then CCSHARED="-fPIC";
		 else CCSHARED="+z";
		 fi;;
	Linux-android*) ;;
	Linux*|GNU*) CCSHARED="-fPIC";;
	BSD/OS*/4*) CCSHARED="-fpic";;
	FreeBSD*|NetBSD*|OpenBSD*|DragonFly*) CCSHARED="-fPIC";;
	OpenUNIX*|UnixWare*)
		if test "$GCC" = "yes"
		then CCSHARED="-fPIC"
		else CCSHARED="-KPIC"
		fi;;
	SCO_SV*)
		if test "$GCC" = "yes"
		then CCSHARED="-fPIC"
		else CCSHARED="-Kpic -belf"
		fi;;
	IRIX*/6*)  case $CC in
		   *gcc*) CCSHARED="-shared";;
		   *) CCSHARED="";;
		   esac;;
	esac
  fi
  PYCCSHARED=$CCSHARED
  AC_MSG_RESULT($PYCCSHARED)
  
  # Availability of -O2:
  AC_MSG_CHECKING(for -O2)
  saved_cflags="$CFLAGS"
  CFLAGS="-O2"
  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[
  ]])],[have_O2=yes],[have_O2=no])
  AC_MSG_RESULT($have_O2)
  CFLAGS="$saved_cflags"

  if test "${OPT-unset}" = "unset"; then
    case $GCC in
    yes)
        if test "$CC" != 'g++' ; then
	      STRICT_PROTO="-Wstrict-prototypes"
	    fi
	    
        # For gcc 4.x we need to use -fwrapv so lets check if its supported
        if "$CC" -v --help 2>/dev/null |grep -- -fwrapv > /dev/null; then
           WRAP="-fwrapv"
        fi

        case $CC in
            *clang*)
                cc_is_clang=1
                ;;
            *)
                if $CC --version 2>&1 | grep -q clang
                then
                    cc_is_clang=1
                else
                    cc_is_clang=
                fi
        esac

        if test -n "${cc_is_clang}"
        then
            # Clang also needs -fwrapv
            WRAP="-fwrapv"
            # bpo-30104: disable strict aliasing to compile correctly dtoa.c,
            # see Makefile.pre.in for more information
            CFLAGS_ALIASING="-fno-strict-aliasing"
        fi

	case $ac_cv_prog_cc_g in
	yes)
	    if test "$Py_DEBUG" = 'true' ; then
		# Optimization messes up debuggers, so turn it off for
		# debug builds.
                if "$CC" -v --help 2>/dev/null |grep -- -Og > /dev/null; then
                    OPT="-g -Og -Wall"
                else
                    OPT="-g -O0 -Wall"
                fi
	    else
		OPT="-g $WRAP -O3 -Wall"
	    fi
	    ;;
	*)
	    OPT="-O3 -Wall"
	    ;;
	esac

	OPT="$OPT $STRICT_PROTO"

	case $ac_sys_system in
	    SCO_SV*) OPT="$OPT -m486 -DSCO5"
	    ;;
        esac
	;;

    *)
	OPT="-O"
	;;
    esac
    PYOPT=$OPT
fi  

fi

AC_CHECK_LIB(c,itrunc,GOT_ITRUNC=,GOT_ITRUNC=-DCREATE_ITRUNC)

dnl Checking for proj is a bit more complicated now since we have two different style of proj-library and we want to do our
dnl best to identify the proper one.
dnl We also have the case where we don't want to use std-locations even if they exist and as such it is necessary to perform
dnl checks for existance of files besides checking if it is possible to include / link to them.
dnl
dnl --with-proj = Is the automatic approach. First it tries PROJ.6 (=> 6) and then PROJ.4 ( <= 5)
dnl --with-legacy-proj = Only tries PROJ <= 5
dnl --with-new-proj = Only tries PROJ >= 6
dnl
AC_ARG_WITH(proj, [  --with-proj=ROOT or INC,LIB       Use proj and try to identify version automatically. First tries proj >= 6 and then proj.4 or 5],
        ,withval=yes)
proj_withval=$withval

AC_ARG_WITH(legacy-proj, [  --with-legacy-proj=ROOT or INC,LIB       Use the legacy proj library (default disabled) ],
        ,withval=no)
legacyproj_withval=$withval

AC_ARG_WITH(new-proj, [  --with-new-proj=ROOT or INC,LIB       Use the new proj library (default disabled) ],
        ,withval=no)
newproj_withval=$withval

if [[ "$proj_withval" = "" ]]; then
  proj_withval=no
fi
if [[ "$legacyproj_withval" = "" ]]; then
  legacyproj_withval=no
fi
if [[ "$newproj_withval" = "" ]]; then
  newproj_withval=no
fi

if [[ "$legacyproj_withval" != "no" -a "$newproj_withval" != "no" ]]; then
  AC_MSG_ERROR("Don't specify both --with-legacy-proj and --with-new-proj at the same time. Instead use --with-proj to automatically detect version to use.")
fi

if [[ "$legacyproj_withval" != "no" -o "$newproj_withval" != "no" ]]; then
  proj_withval=no
fi

if [[ "$legacyproj_withval" = "no" -a "$newproj_withval" = "no" -a "$proj_withval" = "no" ]]; then
  AC_MSG_ERROR("Can't build rave without proj")
fi

# This is a utility for beeing able to extract the include/lib from the --with directive.
extract_include_or_lib_from_with() {
  if [[ "`echo $2 | grep ','`" = "" ]]; then
    proj_inc=$2/include
    proj_lib=$2/lib
  else
    proj_inc="`echo $2 |cut -f1 -d,`"
    proj_lib="`echo $2 |cut -f2 -d,`"
  fi
  if [[ "$1" = "include" ]]; then
    echo "$proj_inc"
  else
    echo "$proj_lib"
  fi
}

proj_inc=
proj_lib=
# If we are running autodetection, we first try that
# Order for us when figuring out what to do is
# Auto
# New proj >= 6
# Old proj <= 5
if [[ "$proj_withval" != "no" -a "$proj_withval" != "yes" ]]; then
  proj_inc=`extract_include_or_lib_from_with include "$proj_withval"`
  proj_lib=`extract_include_or_lib_from_with lib "$proj_withval"`
elif [[ "$newproj_withval" != "no" -a "$newproj_withval" != "yes" ]]; then
  proj_inc=`extract_include_or_lib_from_with include "$newproj_withval"`
  proj_lib=`extract_include_or_lib_from_with lib "$newproj_withval"`
elif [[ "$legacyproj_withval" != "no" -a "$legacyproj_withval" != "yes" ]]; then
  proj_inc=`extract_include_or_lib_from_with include "$legacyproj_withval"`
  proj_lib=`extract_include_or_lib_from_with lib "$legacyproj_withval"`
fi

PROJ6_CHECK_FAILED=no
PROJ4_CHECK_FAILED=no
GOT_PROJ_INC=no
PROJ_INCLUDE_DIR=
PROJ_LIB_DIR=
PROJ_VERSION=0

if [[ "$proj_withval" != "no" -o "$newproj_withval" != "no" ]]; then
  AC_MSG_NOTICE(Trying to identify PROJ >= 6) 
   
  saved_CPPFLAGS="$CPPFLAGS"
  saved_LDFLAGS="$LDFLAGS"
  if [[ "$proj_inc" != "" ]]; then
    AC_MSG_CHECKING(if proj.h is accessible)
    if [[ ! -f "$proj_inc/proj.h" ]]; then
      AC_MSG_RESULT(no)
      PROJ6_CHECK_FAILED=yes
    else
      AC_MSG_RESULT(yes)
      CPPFLAGS="$CPPFLAGS -I$proj_inc"
      AC_CHECK_HEADERS(
        [proj.h],
        [GOT_PROJ_INC=yes
         PROJ_INCLUDE_DIR="-I$proj_inc"],
        [PROJ6_CHECK_FAILED=yes]
      )
    fi
  else
    AC_CHECK_HEADERS(proj.h,GOT_PROJ_INC=yes,PROJ6_CHECK_FAILED=yes)
  fi
    
  if [[ "$proj_lib" != "" ]]; then
    AC_MSG_CHECKING(if libproj is accessible)
    TMP=`ls -1 "$proj_lib"/libproj.* 2>/dev/null`
    if [[ "$TMP" = "" ]]; then
      AC_MSG_RESULT(no)
      PROJ6_CHECK_FAILED=yes
    else
      AC_MSG_RESULT(yes)
      LDFLAGS="$LDFLAGS -L$proj_lib"
      AC_CHECK_LIB(
        [proj],
        [proj_trans],
        [GOT_PROJ_LIB=yes
         PROJ_LIB_DIR="-L$proj_lib"],
        [LDFLAGS="$saved_LDFLAGS"
         PROJ6_CHECK_FAILED=yes]
      )
    fi
  else
    AC_CHECK_LIB(proj,proj_trans,GOT_PROJ_LIB=yes,PROJ6_CHECK_FAILED=yes)
  fi

  if [[ "$PROJ6_CHECK_FAILED" = "no" ]]; then
    AC_RUN_IFELSE(
      [AC_LANG_PROGRAM(
        [[#include <proj.h>
          #include <stdio.h>
          #include <stdlib.h>]],
        [[printf("%d\n", PROJ_VERSION_MAJOR); exit(0);]])
      ],
      [AC_SUBST(PROJ_VERSION, [[`./conftest$EXEEXT`]])],
      [PROJ6_CHECK_FAILED=yes]
    )
    if [[ "$PROJ6_CHECK_FAILED" = "no" ]]; then
      PROJ_VERSION=`echo $PROJ_VERSION | egrep -e "^[[0-9]]+$"`
      if [[ "$PROJ_VERSION" = "" ]]; then
        PROJ6_CHECK_FAILED=yes
        PROJ_VERSION=0
      fi
    fi  
  fi
  
  if [[ "$PROJ6_CHECK_FAILED" = "no" -a "$PROJ_VERSION" -ge 6 ]]; then
    AC_MSG_RESULT(identified proj version $PROJ_VERSION)
  else
    AC_MSG_RESULT(could not identify proj version >= 6)
    CPPFLAGS="$saved_CPPFLAGS"
    LDFLAGS="$saved_LDFLAGS"
    PROJ6_CHECK_FAILED=yes
  fi
else
  # If we don't atempt to identify proj.6 we can always assume that it has failed.
  PROJ6_CHECK_FAILED=yes  
fi

if [[ "$PROJ6_CHECK_FAILED" = "yes" -a "$proj_withval" != "no" ]] || [[ "$legacyproj_withval" != "no" ]]; then
  AC_MSG_NOTICE(Trying to identify PROJ <= 5) 
  
  saved_CPPFLAGS="$CPPFLAGS"
  saved_LDFLAGS="$LDFLAGS"
  if [[ "$proj_inc" != "" ]]; then
    AC_MSG_CHECKING(if projects.h is accessible)
    if [[ ! -f "$proj_inc/projects.h" ]]; then
      AC_MSG_RESULT(no)
      PROJ4_CHECK_FAILED=yes
    else
      AC_MSG_RESULT(yes)
      CPPFLAGS="$CPPFLAGS -I$proj_inc"
      AC_CHECK_HEADERS(
        [projects.h],
        [GOT_PROJ_INC=yes
         PROJ_INCLUDE_DIR="-I$proj_inc"],
        [PROJ4_CHECK_FAILED=yes]
      )
    fi
  else
    AC_CHECK_HEADERS(projects.h,GOT_PROJ_INC=yes,PROJ4_CHECK_FAILED=yes)
  fi
    
  if [[ "$proj_lib" != "" ]]; then
    AC_MSG_CHECKING(if libproj is accessible)
    TMP=`ls -1 "$proj_lib"/libproj.* 2>/dev/null`
    if [[ "$TMP" = "" ]]; then
      AC_MSG_RESULT(no)
      PROJ4_CHECK_FAILED=yes
    else
      AC_MSG_RESULT(yes)
      LDFLAGS="$LDFLAGS -L$proj_lib"
      AC_CHECK_LIB(
        [proj],
        [pj_transform],
        [GOT_PROJ_LIB=yes
         PROJ_LIB_DIR="-L$proj_lib"],
        [LDFLAGS="$saved_LDFLAGS"
         PROJ4_CHECK_FAILED=yes]
      )
    fi
  else
    AC_CHECK_LIB(proj,pj_transform,GOT_PROJ_LIB=yes,PROJ4_CHECK_FAILED=yes)
  fi

  if [[ "$PROJ4_CHECK_FAILED" = "no" ]]; then
    AC_RUN_IFELSE(
      [AC_LANG_PROGRAM(
        [[#include <projects.h>
          #include <stdio.h>
          #include <stdlib.h>]],
        [[printf("%d\n", (int)PJ_VERSION/100); exit(0);]])
      ],
      [AC_SUBST(PROJ_VERSION, [[`./conftest$EXEEXT`]])],
      [PROJ4_CHECK_FAILED=yes]
    )
    if [[ "$PROJ4_CHECK_FAILED" = "no" ]]; then
      PROJ_VERSION=`echo $PROJ_VERSION | egrep -e "^[[0-9]]+$"`
      if [[ "$PROJ_VERSION" = "" ]]; then
        PROJ4_CHECK_FAILED=yes
        PROJ_VERSION=0
      fi
    fi  
  fi
  
  if [[ "$PROJ4_CHECK_FAILED" = "no" -a "$PROJ_VERSION" -le 5 ]]; then
    AC_MSG_RESULT(identified proj version $PROJ_VERSION)
  else
    AC_MSG_RESULT(could not identify proj version <= 5)
    CPPFLAGS="$saved_CPPFLAGS"
    LDFLAGS="$saved_LDFLAGS"
    PROJ4_CHECK_FAILED=yes
  fi
else
  # If no proj.4 check is performed we can assume that it has failed.
  PROJ4_CHECK_FAILED=yes
fi

USE_PROJ4_API=no
if [[ "$PROJ6_CHECK_FAILED" = "no" ]]; then
  USE_PROJ4_API=no
elif [[ "$PROJ4_CHECK_FAILED" = "no" ]]; then
  USE_PROJ4_API=yes
else
  AC_MSG_ERROR(Could not identify any usable PROJ)
fi

EXPAT_INCLUDE_DIR=
EXPAT_LIB_DIR=
GOT_EXPAT_INC=no
GOT_EXPAT_LIB=no
EXPAT_SUPPRESSED=yes
AC_ARG_WITH(expat,[  --with-expat=ROOT or INC,LIB       Use the expat library],
    ,withval=no)
case $withval in
  yes)
    AC_CHECK_HEADERS(expat.h,GOT_EXPAT_INC=yes)
    AC_CHECK_LIB(expat,XML_ParserCreate,GOT_EXPAT_LIB=yes)
    EXPAT_SUPPRESSED=no
    ;;
  no)
    AC_MSG_CHECKING(for expat lib)
    AC_MSG_RESULT(suppressed)
    EXPAT_SUPPRESSED=yes
    ;;
  *)
    if [[ "$withval" != "" ]]; then
      if [[ "`echo $withval | grep ','`" = "" ]]; then
        expat_inc=$withval/include
        expat_lib=$withval/lib
      else
        expat_inc="`echo $withval |cut -f1 -d,`"
        expat_lib="`echo $withval |cut -f2 -d,`"
      fi
      
      if [[ "$expat_inc" != "" ]]; then
        saved_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS -I$expat_inc"
        AC_CHECK_HEADERS(expat.h,GOT_EXPAT_INC=yes)
        if [[ "$GOT_EXPAT_INC" = "yes" ]]; then
          EXPAT_INCLUDE_DIR="-I$expat_inc"
        else
          CPPFLAGS="$saved_CPPFLAGS"
        fi
      else
        AC_CHECK_HEADERS(expat.h,GOT_EXPAT_INC=yes)
      fi

      if [[ "$expat_lib" != "" ]]; then
        saved_LDFLAGS="$LDFLAGS"
        LDFLAGS="$LDFLAGS -L$expat_lib"
        AC_CHECK_LIB(expat, XML_ParserCreate, GOT_EXPAT_LIB=yes)
        if [[ "$GOT_EXPAT_LIB" = "yes" ]]; then
          EXPAT_LIB_DIR="-L$expat_lib"
        else
          LDFLAGS="$saved_LDFLAGS"
        fi
      else
        AC_CHECK_LIB(expat, XML_ParserCreate, GOT_EXPAT_LIB=yes)
      fi
    else
      AC_MSG_ERROR("Odd argument passed for expat")
    fi
    EXPAT_SUPPRESSED=no
    ;;
esac

if [[ "$EXPAT_SUPPRESSED" = "no" ]]; then
  if [[ "$GOT_EXPAT_INC" = "no" -o "$GOT_EXPAT_LIB" = "no" ]]; then
    AC_MSG_ERROR("Could not successfully find the expat library")
  fi
fi

dnl -----------------------------
dnl Try to locate the numpy include file 'arrayobject.h' automatically,
dnl if this does not succeed, then the user has to specify this argument
dnl manually.
dnl -----------------------------
AC_ARG_WITH(numpy,[  --with-numpy=INC     Use the numpy include file],
		,withval=yes)
NUMPY_INCLUDE_DIR=
if [[ "$COMPILE_FOR_PYTHON" = "yes" ]]; then
  case $withval in
	no)
		AC_MSG_ERROR(You can not remove dependencies to numpy)
		;;
	*)
		numpy_inc="`echo $withval`"
		FOUND_NUMPY_INC=no
		numpy_inc_app=
		
		if test "xyes" = "x$numpy_inc"; then
		  TESTNUMPYDIR=`$PYBIN -c "import numpy; print(eval(\"numpy.__\"+\"file__\"))"`
		  if test $? -ne 0; then
			  numpy_inc="$PY_EXEC_INSTALLDIR/include/python$PYVERSION"
	    else
			  numpy_inc=`echo $TESTNUMPYDIR | sed -e"s/\/__init__.pyc//" | sed -e"s/\/__init__.py//"`
	    fi
		fi
		if [[ -f $numpy_inc/arrayobject.h ]]; then
			numpy_inc_app=
			FOUND_NUMPY_INC=yes
		elif [[ -f $numpy_inc/numpy/arrayobject.h ]]; then
			numpy_inc_app="/numpy"
			FOUND_NUMPY_INC=yes
		elif [[ -f $numpy_inc/core/include/numpy/arrayobject.h ]]; then
		    numpy_inc_app="/core/include/numpy"
		    FOUND_NUMPY_INC=yes
		elif [[ -f $numpy_inc/numpy/core/include/numpy/arrayobject.h ]]; then
		    numpy_inc_app="/numpy/core/include/numpy"
		    FOUND_NUMPY_INC=yes
    else
      TEST_INCLUDE=`$PYBIN -c "import numpy; print(numpy.get_include())"`
      if test "x" != "x$TEST_INCLUDE"; then
        if [[ -f "$TEST_INCLUDE/arrayobject.h" ]]; then
          numpy_inc="$TEST_INCLUDE"
          numpy_inc_app=
          FOUND_NUMPY_INC=yes
        elif [[ -f "$TEST_INCLUDE/numpy/arrayobject.h" ]]; then
          numpy_inc="$TEST_INCLUDE"
          numpy_inc_app=/numpy
          FOUND_NUMPY_INC=yes
        fi
      fi
		fi
		if test "xyes" != "x$FOUND_NUMPY_INC"; then
			AC_MSG_ERROR(Could not locate arrayobject.h)
		fi
    NUMPYDIR=`basename $numpy_inc$numpy_inc_app`
    if [[ "$NUMPYDIR" = "numpy" ]]; then
      NUMPYBASEDIR=`dirname $numpy_inc$numpy_inc_app`
		  NUMPY_INCLUDE_DIR="-I$NUMPYBASEDIR -I$NUMPYBASEDIR/numpy"
    else
      NUMPY_INCLUDE_DIR="-I$NUMPYBASEDIR -I$numpy_inc$numpy_inc_app"
    fi		
    ;;
  esac
fi

dnl -----------------------------
dnl Is the hlhdf present? It has a header file 'hlhdf.h' and a library -lhlhdf.
dnl It also has a include file pyhlhdf_common.h and a library -lpyhlhdf.
dnl There should also exist a hldef.mk.
dnl If a file hlinstall.sh exists, it is a bonus :)
dnl Their locations might be specified with the --with-hlhdf
dnl command-line switch. The value is an include path and/or a library path.
dnl It the library path is specified then it must be preceded by a comma.
dnl -----------------------------

AC_ARG_WITH(hlhdf,[  --with-hlhdf=ROOT    Use the hlhdf library],
		,withval=yes)
case $withval in
  no)
	AC_MSG_ERROR(You can not remove dependencies to hlhdf)
    ;;
  *)
    hlhdf_root="`echo $withval`"
    if [[ "$COMPILE_FOR_PYTHON" = "yes" ]]; then    
      if test "xyes" = "x$hlhdf_root"; then
        TESTHLDIR=`$PYBIN -c "import _pyhl; print(eval(\"_pyhl.__\"+\"file__\"))"`
        if test $? -ne 0; then
          AC_MSG_ERROR("Could not find hlhdf please specify --with-hlhdf=<hlhdfroot>")
        else
          hlhdf_root=`echo $TESTHLDIR | sed -e"s/\/lib\/_pyhl.so//"`
        fi
      fi
    else
      if [[ "$hlhdf_root" = "yes" ]]; then
        hlhdf_root=`locate hlhdf/mkf/hldef.mk | head -1`
        if [[ $? -ne 0 ]]; then
          AC_MSG_ERROR("Failed to locate hlhdf.mk defaulting to /usr/lib/hlhdf")
          hlhdf_root="/usr/lib/hlhdf"
        fi
      fi
    fi
    
    AC_MSG_CHECKING(for hlhdf root dir including mkf file)
    if [[ -f $hlhdf_root/mkf/hldef.mk ]]; then
      HLHDF_ROOTDIR=$hlhdf_root
      AC_MSG_RESULT("$HLHDF_ROOTDIR")
    else
      AC_MSG_ERROR("Could not find hlhdf please specify --with-hlhdf=<hlhdfroot>")
    fi
    ;;
esac

dnl We might want to compile rave with a java api

AC_ARG_WITH(jdk,[  --with-jdk=jdkhome    Compile with java support],
		,withval=no)
JDK_ROOT=
JDK_SUPRESSED=yes
JDK_VERSION=
case $withval in
  no)
    AC_MSG_CHECKING(for java)
    AC_MSG_RESULT(suppressed)
    ;;
  *)
    AC_MSG_CHECKING(for java)
    java_jdk_root="`echo $withval`"
    if test "yes" = "$java_jdk_root"; then
      java_bin_dir=`which java | sed -e "s/\/java$//g"`;
      javac_bin_dir=`which javac | sed -e "s/\/javac$//g"`;
      jdk_root=`echo $java_bin_dir | sed -e "s/\/bin$//g"`
    else
      java_bin_dir="$java_jdk_root/bin";
      javac_bin_dir="$java_jdk_root/bin";
      jdk_root="$java_jdk_root"
    fi
    if [[ "$java_bin_dir" != "$javac_bin_dir" ]]; then
      AC_MSG_ERROR(java and javac bin directories seems to be placed at different places)
    elif [[ "$java_bin_dir" = "" ]]; then
      AC_MSG_ERROR(Java: No jdk-home dir reckognized)
    fi
    javaversion=`$java_bin_dir/java -version 2>&1 | grep "java version \"" | sed -e "s/\(java version \"\)\([[0-9\.]]*\)\(_.*\"\)/\2/g"`
    if [[ $? -ne 0 ]]; then
      AC_MSG_ERROR(Failure to execute $java_bin_dir/java -version, is this OpenJDK or SUN JDK?)
    fi
    mx_jversion=`echo $javaversion | cut -d '.' -f1`
    ma_jversion=`echo $javaversion | cut -d '.' -f2`
    if [[ "$mx_jversion" = "" -o "$ma_jversion" = "" ]]; then
      AC_MSG_ERROR(Java must be OpenJDK or Sun JDK version 1.6 or higher, found $javaversion)
    fi
    if [[ $mx_jversion -ne 1 -o $ma_jversion -lt 6 ]]; then
      AC_MSG_ERROR(Java must be OpenJDK or SUN version 1.6 or higher, found $javaversion)
    else
      JDK_ROOT="$jdk_root"
      JDK_SUPRESSED=no
      JDK_VERSION=$javaversion
      AC_MSG_RESULT($JDK_ROOT)
    fi    
    ;;
esac

dnl Do we want to have BUFR support, default is NO
GOT_BUFR_INC=no
GOT_BUFR_LIB=no
BUFR_INCLUDE_DIR=
BUFR_LIB_DIR=
BUFR_TABLE_DIR=
BUFR_SUPPRESSED=yes
AC_ARG_WITH(bufr,[  --with-bufr=ROOT       Use the bufr library],
		,withval=no)
		
case $withval in
	yes)
		AC_CHECK_HEADERS(bufrlib.h,GOT_BUFR_INC=yes)
		AC_CHECK_LIB(OperaBufr,bufr_read_file,GOT_BUFR_LIB=yes)
		BUFR_SUPPRESSED=no
		;;
	no)
		AC_MSG_CHECKING(for BUFR lib)
		AC_MSG_RESULT(suppressed)
		BUFR_SUPPRESSED=yes
		;;
	*)
    BUFR_SUPPRESSED=no	
    if [[ "$withval" != "" ]]; then
      bufr_inc=$withval/include
      bufr_lib=$withval/lib
      saved_CPPFLAGS="$CPPFLAGS"
      CPPFLAGS="$CPPFLAGS -I$bufr_inc"
      AC_CHECK_HEADERS(bufrlib.h,GOT_BUFR_INC=yes)

      saved_LDFLAGS="$LDFLAGS"
      LDFLAGS="$LDFLAGS -L$bufr_lib"
      AC_CHECK_LIB(OperaBufr,bufr_read_file,GOT_BUFR_LIB=yes)
      
      CPPFLAGS=$saved_CPPFLAGS
      LDFLAGS=$saved_LDFLAGS
      if [[ "$GOT_BUFR_INC" = "yes" -a "$GOT_BUFR_LIB" = "yes" ]]; then
        BUFR_INCLUDE_DIR="-I$withval/include"
        BUFR_LIB_DIR="-L$withval/lib"
      fi
      if [[ -d "$withval/share/bbufr/tables" ]]; then
        BUFR_TABLE_DIR="$withval/share/bbufr/tables"
      fi
    else
      AC_MSG_ERROR("Odd argument passed for bufr")
    fi
    ;;
esac

if [[ "$BUFR_SUPPRESSED" = "no" ]]; then
  if [[ "$GOT_BUFR_INC" = "no" -o "$GOT_BUFR_LIB" = "no" ]]; then
    AC_MSG_ERROR(Could not find opera bufr includes and/or libraries)
  fi
fi

AC_ARG_WITH(bufr-tables,[  --with-bufr-tables=DIR       Use the bufr tables in specified directory as default],
		,withval=no)
case $withval in
	no)
	  if [[ "$BUFR_SUPPRESSED" = "no" ]]; then
	    if [[ "$BUFR_TABLE_DIR" = "" ]]; then
	      AC_MSG_ERROR(You need to specify a directory where the bufr tables can be found)
	    else
	      if [[ ! -d "$BUFR_TABLE_DIR" ]]; then
	        AC_MSG_ERROR(Bad bufr table directory)
	      fi
	    fi
	  fi
	  ;;
    *)
      if [[ "$withval" != "" ]]; then
        if [[ -d "$withval" ]]; then
          BUFR_TABLE_DIR="$withval"
        else
          AC_MSG_ERROR(Bad bufr table directory)
        fi
      else
        if [[ "$BUFR_TABLE_DIR" = "" -o -d "$BUFR_TABLE_DIR" ]]; then
          AC_MSG_ERROR(Bad bufr table directory, have you tried to use with-bufr-tables)
        fi 
      fi
      ;;
esac	  

dnl if [[ "x$BUFR_SUPPRESSED" = "xno" ]]; then
dnl   if [[ "x$BUFR_TABLE_DIR" = "x" ]]; then
dnl     AC_MSG_ERROR("Could not locate any bufr table dir, try  option with bufr tables")
dnl   fi

dnl   if [[ "x$GOT_BUFR_INC" = "xno" -o "x$GOT_BUFR_LIB" = "xno" ]]; then
dnl     AC_MSG_ERROR("Could not successfully find the Opera Bufr library")
dnl   fi
dnl fi

dnl Do we want to have NETCDF (CF) support, default is NO
GOT_NETCDF_INC=no
GOT_NETCDF_LIB=no
NETCDF_INCLUDE_DIR=
NETCDF_LIB_DIR=
NETCDF_SUPPRESSED=yes
CF_SUPPRESSED=yes
AC_ARG_WITH(netcdf,[  --with-netcdf=ROOT or INC,LIB      Use the netcdf library],
  ,withval=no)
		
case $withval in
  yes)
    AC_CHECK_HEADERS(netcdf.h,GOT_NETCDF_INC=yes)
    AC_CHECK_LIB(netcdf,nc_create,GOT_NETCDF_LIB=yes)
    NETCDF_SUPPRESSED=no
    ;;
  no)
    AC_MSG_CHECKING(for NETCDF lib)
    AC_MSG_RESULT(suppressed)
    NETCDF_SUPPRESSED=yes
    ;;
  *)
    NETCDF_SUPPRESSED=no	
    if [[ "$withval" != "" ]]; then
      if [[ "`echo $withval | grep ','`" = "" ]]; then
        netcdf_inc=$withval/include
        netcdf_lib=$withval/lib
      else
        netcdf_inc="`echo $withval |cut -f1 -d,`"
        netcdf_lib="`echo $withval |cut -f2 -d,`"
      fi

      if [[ "$netcdf_inc" != "" ]]; then
        saved_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS -I$netcdf_inc"
        AC_CHECK_HEADERS(netcdf.h,GOT_NETCDF_INC=yes)
        if [[ "$GOT_NETCDF_INC" = "yes" ]]; then
          NETCDF_INCLUDE_DIR="-I$netcdf_inc"
        else
          CPPFLAGS="$saved_CPPFLAGS"
        fi
      else
        AC_CHECK_HEADERS(netcdf.h,GOT_EXPAT_INC=yes)
      fi

      if [[ "$netcdf_lib" != "" ]]; then
        saved_LDFLAGS="$LDFLAGS"
        LDFLAGS="$LDFLAGS -L$netcdf_lib"
        AC_CHECK_LIB(netcdf,nc_create,GOT_NETCDF_LIB=yes)
        if [[ "$GOT_NETCDF_LIB" = "yes" ]]; then
          NETCDF_LIB_DIR="-L$netcdf_lib"
        else
          LDFLAGS="$saved_LDFLAGS"
        fi
      else
        AC_CHECK_LIB(netcdf,nc_create,GOT_NETCDF_LIB=yes)
      fi
    else
      AC_MSG_ERROR("Odd argument passed for netcdf")
    fi
    ;;
esac

if [[ "$NETCDF_SUPPRESSED" = "no" ]]; then
  if [[ "$GOT_NETCDF_INC" = "no" -o "$GOT_NETCDF_LIB" = "no" ]]; then
    AC_MSG_ERROR(Could not find netcdf includes and/or libraries)
  fi
  CF_SUPPRESSED=no
fi


AC_MSG_CHECKING(if pthread support is default)
AC_RUN_IFELSE([AC_LANG_SOURCE([[
#include <pthread.h>
void* runme(void*p){return NULL;}
int main(int argc, char** argv) {
  pthread_t p;
  if (pthread_create(&p,NULL,runme,NULL) != 0)
    return 1;
  (void)pthread_detach(p);
  return 0;
}]])],[try_result=yes],[try_result=no],[try_result=no])
AC_MSG_RESULT($try_result)
PTHREAD_SUPPORT_DEFAULT=$try_result

PTHREAD_CC_OPTION_NEEDED=no

dnl If pthread support isnt default, we need to try out pthread

if [[ "$PTHREAD_SUPPORT_DEFAULT" != "yes" ]]; then
saved_CC="$CC"
CC="$CC -pthread"
AC_MSG_CHECKING(if -pthread option is required)
AC_RUN_IFELSE([AC_LANG_SOURCE([[
#include <pthread.h>
void* runme(void*p){return NULL;}
int main(int argc, char** argv) {
  pthread_t p;
  if (pthread_create(&p,NULL,runme,NULL) != 0)
    return 1;
  (void)pthread_detach(p);
  return 0;
}]])],[try_result=yes],[try_result=no],[try_result=no])
AC_MSG_RESULT($try_result)
CC="$saved_CC"
if [[ "$try_result" != "no" ]]; then
  PTHREAD_CC_OPTION_NEEDED=yes
fi
fi

dnl PYGOTPTHREAD is yes/no depending on if python found pthread option necessary
dnl
GOT_PTHREAD_SUPPORT=no
if [[ "$PTHREAD_CC_OPTION_NEEDED" == "yes" ]]; then
  PYOPT="$PYOPT -pthread"
  LDFLAGS="$LDFLAGS -pthread"
fi

if [[ "$PTHREAD_CC_OPTION_NEEDED" == "yes" -o "$PTHREAD_SUPPORT_DEFAULT" == "yes" ]]; then
  GOT_PTHREAD_SUPPORT=yes
fi

dnl It is possible to turn on memory debugging within RAVE
debugmemory=no
AC_ARG_ENABLE(debug-memory,
  [  --enable-debug-memory     Turns on the rave memory debugging. This should usually not be activated.],
  debugmemory=$enableval)
if [[ "x$debugmemory" = "xyes" ]]; then
  PYOPT="$PYOPT -DRAVE_MEMORY_DEBUG"
fi

HLHDF_INCLUDE_DIR=$HLHDF_ROOTDIR/include
HLHDF_LIB_DIR=$HLHDF_ROOTDIR/lib
HLHDF_INSTALL_BIN=$HLHDF_ROOTDIR/bin/hlinstall.sh
HLHDF_HLDEF_MK_FILE=$HLHDF_ROOTDIR/mkf/hldef.mk

if [[ ! -f $HLHDF_INCLUDE_DIR/hlhdf.h ]]; then
  AC_MSG_ERROR("There is no file $HLHDF_INCLUDE_DIR/hlhdf.h")
fi
if [[ ! -f $HLHDF_LIB_DIR/libhlhdf.a ]]; then
  AC_MSG_ERROR("There is no library $HLHDF_LIB_DIR/libhlhdf.a")
fi
if [[ ! -f $HLHDF_INSTALL_BIN ]]; then
  AC_MSG_ERROR("There is no installation script $HLHDF_INSTALL_BIN")
fi
if [[ ! -f $HLHDF_HLDEF_MK_FILE ]]; then
  AC_MSG_ERROR("There is no mkfile $HLHDF_HLDEF_MK_FILE")
fi

TEST_MD=`cat "$HLHDF_HLDEF_MK_FILE" | egrep -e "^OPTS=" | grep "DHLHDF_MEMORY_DEBUG"`
if [[ "$TEST_MD" != "" ]]; then
  PYOPT="$PYOPT -DHLHDF_MEMORY_DEBUG"
fi


AC_SUBST(PYCC)
AC_SUBST(PY_INCLUDES)
AC_SUBST(PY_SITEPACK)
AC_SUBST(PY_PYTHON_BIN)
AC_SUBST(RAVE_VERSION)
AC_SUBST(RAVE_PATCH_LEVEL)
AC_SUBST(PYOPT)
AC_SUBST(PYLDFLAGS)
AC_SUBST(PYLDSHARED)
AC_SUBST(PYCCSHARED)
AC_SUBST(PYDEFS)
AC_SUBST(GOT_ITRUNC)

AC_SUBST(COMPILE_FOR_PYTHON)

#Substitute the PROJ arguments
AC_SUBST(USE_PROJ4_API)
AC_SUBST(PROJ_INCLUDE_DIR)
AC_SUBST(PROJ_LIB_DIR)

#Substitute the numpy argument
AC_SUBST(NUMPY_INCLUDE_DIR)

# Substitute the expat arguments
AC_SUBST(EXPAT_INCLUDE_DIR)
AC_SUBST(EXPAT_LIB_DIR)
AC_SUBST(EXPAT_SUPPRESSED)

# Substitute the jdk home arguments
AC_SUBST(JDK_SUPRESSED)
AC_SUBST(JDK_ROOT)
AC_SUBST(JDK_VERSION)

# Substitute the bufr arguments
AC_SUBST(BUFR_INCLUDE_DIR)
AC_SUBST(BUFR_LIB_DIR)
AC_SUBST(BUFR_TABLE_DIR)
AC_SUBST(BUFR_SUPPRESSED)

# Substitute the netcdf arguments
AC_SUBST(NETCDF_INCLUDE_DIR)
AC_SUBST(NETCDF_LIB_DIR)
AC_SUBST(NETCDF_SUPPRESSED)
AC_SUBST(CF_SUPPRESSED)

# Substitute the pthread arguments
AC_SUBST(GOT_PTHREAD_SUPPORT)

#Substitutes for the HLHDF library.The HLHDF
#installation contains a mk file that contains
#the paths for HDF5 and possibly ZLIB.
AC_SUBST(HLHDF_ROOTDIR)
AC_SUBST(HLHDF_INCLUDE_DIR)
AC_SUBST(HLHDF_LIB_DIR)
AC_SUBST(HLHDF_INSTALL_BIN)
AC_SUBST(HLHDF_HLDEF_MK_FILE)

AC_CONFIG_FILES(def.mk librave/toolbox/rave_config.h)
AC_OUTPUT
